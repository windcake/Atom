


LinkedHashMap<String, Entry> lruEntries;

LruCache的文件是在内存里的，所以它的泛型是key和value, 比如常见的<String,Bitmap>
但是磁盘缓存的文件是存在磁盘里，不能直接引用。那怎么去磁盘里找这个文件呢。
所以我们必须有一个地方去记录磁盘里都有哪些文件以及文件名。
journal文件就是干这个用的

## 最近最少算法的实现

## size的计算和trimToSize方法
maxSize指明了单位是bytes
 maxSize the maximum number of bytes this cache should use to store
 每个缓存实体
 valueCount the number of values per cache entry.
Entry的构造方法里初始化了这个lengths数组，用以记录每个value的长度
```
private Entry(String key) {
     this.key = key;
     this.lengths = new long[valueCount];
   }
```
在completeEdit里赋值了entry的长度
long newLength = clean.length();
entry.lengths[i] = newLength;



这里引用的是Bitmap的引用。



## Journal文件是什么 介绍Journal文件

## open方法
构造方法人用 private修饰的，所以提供的open方法。
```
private void readJournal() throws IOException {
    StrictLineReader reader = new StrictLineReader(new FileInputStream(journalFile), Util.US_ASCII);
    try {
      String magic = reader.readLine();
      String version = reader.readLine();
      String appVersionString = reader.readLine();
      String valueCountString = reader.readLine();
      String blank = reader.readLine();
// 略几行
      int lineCount = 0;
      while (true) {
        try {
          readJournalLine(reader.readLine());
          lineCount++;
        } catch (EOFException endOfJournal) {
          break;
        }
      }
      redundantOpCount = lineCount - lruEntries.size();

      // If we ended on a truncated line, rebuild the journal before appending to it.
      if (reader.hasUnterminatedLine()) {
        rebuildJournal();
      } else {
        journalWriter = new BufferedWriter(new OutputStreamWriter(
            new FileOutputStream(journalFile, true), Util.US_ASCII));
      }
    } finally {
      Util.closeQuietly(reader);
    }
  }
```

## 写入过程
通过edit方法返回一个Editor的
然后调用Editor的newOutputStream返回一个输出流
输出流写入完毕之后，调用Editor的commit方法
commit方法内部调用completeEdit方法

```
private synchronized void completeEdit(Editor editor, boolean success) throws IOException {
   Entry entry = editor.entry;
   if (entry.currentEditor != editor) {
     throw new IllegalStateException();
   }

   // If this edit is creating the entry for the first time, every index must have a value.
   if (success && !entry.readable) {
     for (int i = 0; i < valueCount; i++) {
       if (!editor.written[i]) {
         editor.abort();
         throw new IllegalStateException("Newly created entry didn't create value for index " + i);
       }
       if (!entry.getDirtyFile(i).exists()) {
         editor.abort();
         return;
       }
     }
   }

   for (int i = 0; i < valueCount; i++) {
     File dirty = entry.getDirtyFile(i);
     if (success) {
       if (dirty.exists()) {
         File clean = entry.getCleanFile(i);
         dirty.renameTo(clean);
         long oldLength = entry.lengths[i];
         long newLength = clean.length();
         entry.lengths[i] = newLength;
         size = size - oldLength + newLength;
       }
     } else {
       deleteIfExists(dirty);
     }
   }

   redundantOpCount++;
   entry.currentEditor = null;
   if (entry.readable | success) {
     entry.readable = true;
     journalWriter.write(CLEAN + ' ' + entry.key + entry.getLengths() + '\n');
     if (success) {
       entry.sequenceNumber = nextSequenceNumber++;
     }
   } else {
     lruEntries.remove(entry.key);
     journalWriter.write(REMOVE + ' ' + entry.key + '\n');
   }
   journalWriter.flush();

   if (size > maxSize || journalRebuildRequired()) {
     executorService.submit(cleanupCallable);
   }
 }
```
