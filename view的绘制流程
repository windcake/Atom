



## measure方法
在measure方法经过一通折腾，然后调用了onMeasure方法。
正如其方法注释中说，实际的测量工作是在onMeasure里的，因此，只有onMeasure方法可以被
子类重写，且必须被重写。

```
/**
  * The actual measurement work of a view is performed in
  * {@link #onMeasure(int, int)}, called by this method. Therefore, only
  * {@link #onMeasure(int, int)} can and must be overridden by subclasses.
  * </p>
  */
public final void measure(int widthMeasureSpec, int heightMeasureSpec)
{
    onMeasure(widthMeasureSpec, heightMeasureSpec);
}
```

## MeasureSpec插播
其源码和注释如下
int 4字节 bit数是4*8 左移一位是*2 左移三十位够用

```
/**

   * 一个MeasureSpec封装了父布局或者子布局的需求。每个MeasureSpec提供了一个宽或者高的值
   * 它由size和mode组成。mode有三种
   * UNSPECIFIED
   * 父布局没有给子布局任何约束，它想多大多大。
   * EXACTLY
   * 父布局给子布局指定了一个确定的大小，子布局必须是这个大小，就不能为所欲为了。
   * AT_MOST
   * 子布局可以任意变大，直到某个指定的大小。
   * MeasureSpecs被实现为整形，减小了对象的占用。这个类把size和mode打包成int值。
   * MeasureSpecs are implemented as ints to reduce object allocation. This class
   * is provided to pack and unpack the &lt;size, mode&gt; tuple into the int.
   */
  public static class MeasureSpec {
      private static final int MODE_SHIFT = 30;
      // 1100000000000000000000
      private static final int MODE_MASK  = 0x3 << MODE_SHIFT;

      /** @hide */
      @IntDef({UNSPECIFIED, EXACTLY, AT_MOST})
      @Retention(RetentionPolicy.SOURCE)
      public @interface MeasureSpecMode {}

      /**
       * Measure specification mode: The parent has not imposed any constraint
       * on the child. It can be whatever size it wants.
       */
      public static final int UNSPECIFIED = 0 << MODE_SHIFT;

      /**
       * Measure specification mode: The parent has determined an exact size
       * for the child. The child is going to be given those bounds regardless
       * of how big it wants to be.
       */
      public static final int EXACTLY     = 1 << MODE_SHIFT;

      /**
       * Measure specification mode: The child can be as large as it wants up
       * to the specified size.
       */
      public static final int AT_MOST     = 2 << MODE_SHIFT;

      /**
       * Creates a measure specification based on the supplied size and mode.
       *
       * The mode must always be one of the following:
       * <ul>
       *  <li>{@link android.view.View.MeasureSpec#UNSPECIFIED}</li>
       *  <li>{@link android.view.View.MeasureSpec#EXACTLY}</li>
       *  <li>{@link android.view.View.MeasureSpec#AT_MOST}</li>
       * </ul>
       *
       * <p><strong>Note:</strong> On API level 17 and lower, makeMeasureSpec's
       * implementation was such that the order of arguments did not matter
       * and overflow in either value could impact the resulting MeasureSpec.
       * {@link android.widget.RelativeLayout} was affected by this bug.
       * Apps targeting API levels greater than 17 will get the fixed, more strict
       * behavior.</p>
       *
       * @param size the size of the measure specification
       * @param mode the mode of the measure specification
       * @return the measure specification based on size and mode
       */
       //~MODE_MASK是 0011111111111 和size按位与，得到前两位是0的数
       //MODE_MASK是  1100000000000和mode按位与恰好留下最高两位
       //然后再或 高两位和低三十位合并 得到完整的
      public static int makeMeasureSpec(@IntRange(from = 0, to = (1 << MeasureSpec.MODE_SHIFT) - 1) int size,
                                        @MeasureSpecMode int mode) {
          if (sUseBrokenMakeMeasureSpec) {
              return size + mode;
          } else {
              return (size & ~MODE_MASK) | (mode & MODE_MASK);
          }
      }

      /**
       * Like {@link #makeMeasureSpec(int, int)}, but any spec with a mode of UNSPECIFIED
       * will automatically get a size of 0. Older apps expect this.
       *
       * @hide internal use only for compatibility with system widgets and older apps
       */
      public static int makeSafeMeasureSpec(int size, int mode) {
          if (sUseZeroUnspecifiedMeasureSpec && mode == UNSPECIFIED) {
              return 0;
          }
          return makeMeasureSpec(size, mode);
      }

      /**
       * Extracts the mode from the supplied measure specification.
       *
       * @param measureSpec the measure specification to extract the mode from
       * @return {@link android.view.View.MeasureSpec#UNSPECIFIED},
       *         {@link android.view.View.MeasureSpec#AT_MOST} or
       *         {@link android.view.View.MeasureSpec#EXACTLY}
       */
      @MeasureSpecMode
      public static int getMode(int measureSpec) {
          //noinspection ResourceType
          return (measureSpec & MODE_MASK);
      }

      /**
       * Extracts the size from the supplied measure specification.
       *
       * @param measureSpec the measure specification to extract the size from
       * @return the size in pixels defined in the supplied measure specification
       */
      public static int getSize(int measureSpec) {
          return (measureSpec & ~MODE_MASK);
      }

      static int adjust(int measureSpec, int delta) {
          final int mode = getMode(measureSpec);
          int size = getSize(measureSpec);
          if (mode == UNSPECIFIED) {
              // No need to adjust size for UNSPECIFIED mode.
              return makeMeasureSpec(size, UNSPECIFIED);
          }
          size += delta;
          if (size < 0) {
              Log.e(VIEW_LOG_TAG, "MeasureSpec.adjust: new size would be negative! (" + size +
                      ") spec: " + toString(measureSpec) + " delta: " + delta);
              size = 0;
          }
          return makeMeasureSpec(size, mode);
      }
  }

```

## onMeasure方法
这个方法一进来调用了setMeasuredDimension（设置测量尺寸）这个方法，但它的参数却是通过调用另一个
方法得到。

```
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
// Dimension 尺寸维度
       setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),
               getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));
   }
```

其内部调用了setMeasuredDimension，并传了两个参数。这个参数是由getDefaultSize获得的，先看这个方法
宽度和高度都是调用了这个方法，我们以宽度为例往下分析。

size:SuggestedMinimumWidth (建议最小宽度)
measureSpec：widthMeasureSpec （宽度的MeasureSpec）
它的逻辑是，如果MODE是未指定（UNSPECIFIED），返回值就是建议最小宽度（SuggestedMinimumWidth）
如果是AT_MOST或者EXACTLY，返回值就是widthMeasureSpec里的size

```
// 得到默认值方法
public static int getDefaultSize(int size, int measureSpec) {
     int result = size;
     int specMode = MeasureSpec.getMode(measureSpec);
     int specSize = MeasureSpec.getSize(measureSpec);

     switch (specMode) {
     case MeasureSpec.UNSPECIFIED:
         result = size;
         break;
     case MeasureSpec.AT_MOST:
     case MeasureSpec.EXACTLY:
         result = specSize;
         break;
     }
     return result;
 }
```
如果mode是UNSPECIFIED即未指定，就返回传过来的size值
如果是AT_MOST或者EXACTLY就返回measureSpec里的specSize部分。
size值是getSuggestedMinimumWidth()的返回值
measureSpec是调用meaure的类传来的。

## 看一下getSuggestedMinimumWidth是怎么回事
建议最小宽度方法
如果没有背景，就是mMinWidth
如果有背景就取 mMinWidth和背景最小宽度的最大值。

```
protected int getSuggestedMinimumWidth() {
        return (mBackground == null) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());
    }
```
这些都是系统默认值，而mMinWidth的赋值方法如下。

```
case R.styleable.View_minWidth:
      mMinWidth = a.getDimensionPixelSize(attr, 0);
```

## onMeasure实际是调用了setMeasuredDimension方法
measuredWidth：通过getDefaultSize拿到系统的默认值
measuredHeight


```
protected final void setMeasuredDimension(int measuredWidth, int measuredHeight) {
// Optical bounds layout 视觉边界布局
        boolean optical = isLayoutModeOptical(this);
        if (optical != isLayoutModeOptical(mParent)) {
            Insets insets = getOpticalInsets();
            int opticalWidth  = insets.left + insets.right;
            int opticalHeight = insets.top  + insets.bottom;

            measuredWidth  += optical ? opticalWidth  : -opticalWidth;
            measuredHeight += optical ? opticalHeight : -opticalHeight;
        }
        setMeasuredDimensionRaw(measuredWidth, measuredHeight);
    }

    private void setMeasuredDimensionRaw(int measuredWidth, int measuredHeight) {
        mMeasuredWidth = measuredWidth;
        mMeasuredHeight = measuredHeight;

        mPrivateFlags |= PFLAG_MEASURED_DIMENSION_SET;
    }
```


在这个方法里把测量的宽高赋值给measuredWidth和measuredHeight就算完毕了。
这个两个值会在其对应的get方法中返回。
比如layout中就会用到。
所谓测量，其实就是去找这两个值，而不是真正的去量每一个像素。

但是这是View默认的onMesure方法
以上所有方法的参数都是来自measure方法里的widthMeasureSpec和heightMeasureSpec
两个参数，但是，这两个参数是在哪里传进来的呢。
我觉得，只有搞明白这两个参数的来源，测量过程才算真正搞明白了。

measure方法的调用在ViewRootImpl类里的performTraversals（1436--2225）方法中被调用（Traversals遍历的意思）
这是一个更高层次的调用。


```
// 2024行
 performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);
```
```
private void performMeasure(int childWidthMeasureSpec, int childHeightMeasureSpec) {
       Trace.traceBegin(Trace.TRACE_TAG_VIEW, "measure");
       try {
           mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);
       } finally {
           Trace.traceEnd(Trace.TRACE_TAG_VIEW);
       }
   }

```
以上方法的childWidthMeasureSpec是一个局部变量，通过下面方法去组装
lp.width和lp.height在创建ViewGroup实例时等于MATCH_PARENT
```
// 这个变量在构造方法做如下初始化
final WindowManager.LayoutParams mWindowAttributes = new WindowManager.LayoutParams()//180
WindowManager.LayoutParams lp = mWindowAttributes; // 1454
mWidth = -1;
// lp.width 是MATCH_PARENT
int childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);
```
这个方法将LayoutParams和MeasureSpec联系起来

```
private static int getRootMeasureSpec(int windowSize, int rootDimension) {
      int measureSpec;
      switch (rootDimension) {
//      也就是说LayoutParams的MATCH_PARENT是MeasureSpec的EXACTLY
      case ViewGroup.LayoutParams.MATCH_PARENT:
          // Window can't resize. Force root view to be windowSize.
          measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY);
          break;
      case ViewGroup.LayoutParams.WRAP_CONTENT:
          // Window can resize. Set max size for root view.
          measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.AT_MOST);
          break;
      default:
          // Window wants to be an exact size. Force root view to be that size.
          measureSpec = MeasureSpec.makeMeasureSpec(rootDimension, MeasureSpec.EXACTLY);
          break;
      }
      return measureSpec;
  }

```
mWindowAttributes 通过调用如下方法得到，其实是个构造方法。
它的两个参数都是LayoutParams.MATCH_PARENT

```
public interface WindowManager extends ViewManager {

 public static class LayoutParams extends ViewGroup.LayoutParams implements Parcelable {
   public LayoutParams() {
//          父类是ViewGroup，注意参数是MATCH_PARENT
             super(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
             type = TYPE_APPLICATION;
             format = PixelFormat.OPAQUE;
         }
 }
}
```


可以看见这个方法的注释说是用来测Root View的。上面传入参数后这个函数走的是MATCH_PARENT，
使用MeasureSpec.makeMeasureSpec方法组装一个MeasureSpec，
MeasureSpec的specMode等于EXACTLY，specSize等于windowSize，也就是为何根视图总是全屏的原因。



应该自定义一个View，然后继承View，然后放到布局里看看会发生什么。
这样写是不对的，因为自己的View是不是已经在一个ViewGroup里了？



## ViewGroup的测量

```
protected void measureChildren(int widthMeasureSpec, int heightMeasureSpec) {
        final int size = mChildrenCount;
        final View[] children = mChildren;
        for (int i = 0; i < size; ++i) {
            final View child = children[i];
            if ((child.mViewFlags & VISIBILITY_MASK) != GONE) {
                measureChild(child, widthMeasureSpec, heightMeasureSpec);
            }
        }
    }
```
先是调用测量孩子们，然后循环调用measureChild方法。
```
protected void measureChild(View child, int parentWidthMeasureSpec,
           int parentHeightMeasureSpec) {
       final LayoutParams lp = child.getLayoutParams();

       final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,
               mPaddingLeft + mPaddingRight, lp.width);
       final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,
               mPaddingTop + mPaddingBottom, lp.height);

       child.measure(childWidthMeasureSpec, childHeightMeasureSpec);
   }

```
注意注意，每个child都是一个view,调用view的measure方法，就回到一开始View测量的逻辑了。


如果ViewGroup嵌套ViewGroup怎么办，如何测量。


ViewGroup的Layout过程是找到每一个子View的，上下左右的坐标值。
然后去调用这个View的layout方法。
layout方法中调用了setFrame()方法
这个方法里，确定了本View四个顶点相对于父View的
坐标值。这个坐标有了，它的位置也就知道确定了。
