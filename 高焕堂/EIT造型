

EIT Engine Interface Tire

EIT造型，造型就是Form

<基类/子类>代码结构用extends就是继承

IOC：控制反转（Inversion of Control）
这样做是让框架掌握控制权。
写在先的人，调用写在后的。
子类调用父类，就是正向。
父类调用子类，就是反向调用。


EIT组合成设计模式。再组合成框架。

之前的软件没有架构，这样就导致底层代码变动的时候会对上层代码产生很大影响。
所以后来发展出了框架（Framework）

单层框架：E和I先写好，开发的时候再写T。
这样是由框架里的基类来调用APP里的子类。
于是框架就有了软件执行上的控制权

T的生杀大权应该在框架手里，所以不能new Activity

框架并不知道你要new哪些Activity，于是要写到清单文件里。


IPC Inter-Process Communication

短程通信 进程内
远程通信 多个进程
