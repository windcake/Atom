# 日积月累
1. View 是有postDelayed（）方法的
2. 如下布局的宽高是不管用的，因为它没有父布局
```
<Button xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="300dp"
    android:layout_height="80dp"
    android:text="Button" >
</Button>
```
如果想让其管用，外面必须嵌套一层别的布局。这时Button的大小管用了，但是外面的RelativeLayout大小却不管用。但为什么使用setContentView() 方法的时候管用呢，因为默认偷偷在外面嵌套了一层FramLayout。

```
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent" >

    <Button
        android:layout_width="300dp"
        android:layout_height="80dp"
        android:text="Button" >
    </Button>

</RelativeLayout>
```

3. Hanler的构造方法如下 （来自张鸿洋的2014-08-07博客）

```
final MessageQueue mQueue;
final Looper mLooper;
final Callback mCallback;
final boolean mAsynchronous;

public Handler(Callback callback, boolean async) {
    mLooper = Looper.myLooper();
    if (mLooper == null) {
        throw new RuntimeException(
            "Can't create handler inside thread that has not called Looper.prepare()");
    }
    mQueue = mLooper.mQueue;
    mCallback = callback;
    mAsynchronous = async;
  }
```
Handler类的mLooper和mQueue都来自于Looper。因为Looper.prepare()在一个线程中只能调用一次，所以MessageQueue在一个线程中只会存在一个。在当前UI线程调用了Looper.prepare()和Looper.loop()方法
Hanlder发出去的消息最终通过mQueue.enqueueMessage()保存到消息队列当中
最后通过loop()方法取出，然后调用msg.target.dispatchMessage(msg)方法，而dispatchMessage方法又调用了handleMessage方法，这个方法是一个空方法，在创建handler的时候会被重写。

然而消息对象msg是如何从子线程跑到主线程的，并没有说清楚。

Looper的构造方法，有消息队列mQueue和当前线程mThread

```
private Looper(boolean quitAllowed) {
        mQueue = new MessageQueue(quitAllowed);
        mRun = true;
        mThread = Thread.currentThread();
}
```
loop方法拿到Looper的MessageQueue，然后不断queue.next()取消息和msg.target.dispatchMessage(msg)发消息。msg里有what和obj

```
public static void loop() {
        final Looper me = myLooper();
        if (me == null) {
            throw new RuntimeException("No Looper; Looper.prepare() wasn't called on this thread.");
        }
        final MessageQueue queue = me.mQueue;
        Binder.clearCallingIdentity();
        final long ident = Binder.clearCallingIdentity();

        for (;;) {
            Message msg = queue.next();
            if (msg == null) {
                // No message indicates that the message queue is quitting.
                return;
            }
            msg.target.dispatchMessage(msg);
            final long newIdent = Binder.clearCallingIdentity();
            msg.recycle();
        }
}
```
变了

匿名内部类 隐式持有外部类的引用

在一个线程里创建的变量，在另一个线程里可以使用么？
如果是全局变量，两个线程同时修改呢？能改么？

线程空间和进程空间  哪些是共享的，哪些不是共享的
买电影票的问题，多个线程可以同时操作一个变量。


4.  PackageManagerService PKMS
    ActivityManagerService AMS

5. 进程间通信 AIDL 或者 Messager 张鸿洋博客2015-07-23
6. 谷歌Samples关于 null 的写法，是null在前。
   如果有可能为空的值要用equals方法，更应该在前了。
```
if (null == source)
{
    break;
}
```

7. Window是一个抽象类，PhoneWindow是其唯一的实现类（亲儿子）,Window是太上皇位子高没有实权。
8. 内部类默认可以使用外部类的成员变量，说明内部类引用外部类了。
9. 被观察者（Observable）数据变化时，通知观察者(Observe).在ListView中，Adapter是被观察者，当list数据变化时，通知ListView。
10. SrollView套ListView时，ListView的MatchParent属性不管用。其高度为一个Item的高度。
11. ListView局部刷新，就是找到该Item的position和与之对应的数据，讲这两者都更新一下就好了。
12. Android SDK Content 通过 “~/.android ” 进入 .android这个隐藏的文件夹， 删除“cache” 文件夹以及里面的全部内容。删除“ddms.cfg” 文件。重新打开 eclipse即可。

13.  如果拿到这个值就怎样
```
TypedArray a = getWindowStyle();
if (a.getBoolean(R.styleable.Window_windowNoTitle, false)) {
       requestFeature(FEATURE_NO_TITLE);
   } else if (a.getBoolean(R.styleable.Window_windowActionBar, false)) {
       // Don't allow an action bar if there is no title.
       requestFeature(FEATURE_ACTION_BAR);
   }
```

14. singleTask的应用，判断异地登录连发三个请求，返回都是-1003，如果不做判断，就会打开三个登录窗口。

15. 忽略点九图片检查和加大内存的代码

```
aaptOptions
{
    cruncherEnabled = false
    useNewCruncher = false
}
dexOptions {  javaMaxHeapSize "4g" }

```


16. Android画一个Activity的时间是16ms

17. 内存抖动：Memory Monitor里出现毛刺，短时间大量分配内又触发GC

18.Android 6.0已经不支持HttpClient，需要在build.gradle中加入 useLibrary 'org.apache.http.legacy'

19. 官方有TextUtils类，可判断是否为空isEmpty

20. 60帧/秒才流畅，所以要保证16ms/帧，也就是16ms画完一帧。

21. Service里也不能进行耗时操作，必须开启子线程否则ANR

22. Android图片占用内存的问题
一张512*512  150KB PNG格式图片和一张512*512 100KB 压缩比是8的JPG格式的图片,加载到内存中,
也就是加载到一个Bitmap中,哪个占用的内存大? 这个问题似乎有点难回答,测试一下就知道了.
好了,按照要求我准备了三张图片,
1. 512*512px, 114KB, PNG
2. 512*512px, 138KB, JPG ,压缩比 12
3. 512*512px, 57KB, JPG,压缩比 8
接下来是写一个Demo,一个Bitmap加载不同的图片,然后使用bitmap.getRowBytes() * bitmap.getHeight();
得到图片的内存占用情况.(这么简单的程序就不放出来献丑了)
得到的数字居然都是一样的. 刚好是4MB,为什么是4MB? 512*512*4*2,这么算出来的,Bitmap默认加载使用ARGB_8888,
每个像素会占用4byte,因为每个像素有两个Chanel.

23. APK文件的打包过程
第一步：打包资源文件，生成R.java文件
【输入】Resource文件（就是工程中res中的文件）、Assets文件（相当于另外一种资源，这种资源Android系统并不像对res中的文件那样优化它）、AndroidManifest.xml文件（包名就是从这里读取的，因为生成R.java文件需要包名）、Android基础类库（Android.jar文件）
【输出】打包好的资源（一般在Android工程的bin目录可以看到一个叫resources.ap_的文件就是它了）、R.java文件（在gen目录中，大家应该很熟悉了）
【工具】aapt工具，它的路径在${ANDROID_SDK_HOME}/platform-tools/aapt（如果你使用的是Windows系统，按惯例路径应该这样写：%ANDROID_SDK_HOME%\platform-tools\aapt.exe，下同）。
第二步：处理AIDL文件，生成对应的.java文件（当然，有很多工程没有用到AIDL，那这个过程就可以省了）
【输入】源码文件、aidl文件、framework.aidl文件
【输出】对应的.java文件
【工具】aidl工具
第三步：编译Java文件，生成对应的.class文件
【输入】源码文件（包括R.java和AIDL生成的.java文件）、库文件（.jar文件）
【输出】.class文件
【工具】javac工具
第四步：把.class文件转化成Davik VM支持的.dex文件
【输入】源码文件（包括R.java和AIDL生成的.java文件）、库文件（.jar文件）
【输出】.class文件
【工具】javac工具
第五步：打包生成未签名的.apk文件
【输入】打包后的资源文件、打包后类文件（.dex文件）、libs文件（包括.so文件，当然很多工程都没有这样的文件，如果你不使用C/C++开发的话）
【输出】未签名的.apk文件
【工具】apkbuilder工具
第六步：对未签名.apk文件进行签名
【输入】未签名的.apk文件
【输出】签名的.apk文件
【工具】jarsigner
第七步：对签名后的.apk文件进行对齐处理（不进行对齐处理是不能发布到Google Market的）
【输入】签名后的.apk文件
【输出】对齐后的.apk文件
【工具】zipalign工具

24 DSL（领域特定语言）

25 多用组合，少用继承。针对接口编程，不针对具体实现编程。
  优秀框架的高可拓展性魅力来源于此

26 构造函数初始化，参数不一样的话，用少的调用多的。多的参数传null

echo "# OkHttpAnalysis" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/windcake/OkHttpAnalysis.git
git push -u origin master

27 OpenGrok索引代码函数
java -Xmx524m -jar opengrok.jar -W "C:\\opengrok-0.12.1\\data\\configuration.xml" -P -S -v -s "C:\\opengrok-0.12.1\\source" -d "C:\\opengrok-0.12.1\\data"
